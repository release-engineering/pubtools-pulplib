#!/usr/bin/env python
import os
import logging
from argparse import ArgumentParser

from pubtools.pulplib import Client

log = logging.getLogger("search-repo-content")


def make_client(args):
    auth = None

    if args.username:
        password = args.password
        if password is None:
            password = os.environ.get("PULP_PASSWORD")
        if not password:
            log.warning("No password provided for %s", args.username)
        auth = (args.username, args.password)

    return Client(args.url, auth=auth, verify=not args.insecure)


def main():
    log.setLevel(logging.INFO)
    logging.basicConfig(format="%(message)s", level=logging.INFO)

    parser = ArgumentParser(
        description="Retrieve unit objects of the given type from the given repository"
    )
    parser.add_argument("--url", help="Pulp server URL", required=True)
    parser.add_argument("--username", help="Pulp username")
    parser.add_argument("--password", help="Pulp password (or set PULP_PASSWORD in env)")
    parser.add_argument("--repo-id", action="store", required=True)
    parser.add_argument("--content-type", action="store", required=True)
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--insecure", default=False, action="store_true")

    p = parser.parse_args()

    if p.debug:
        logging.getLogger("pubtools.pulplib").setLevel(logging.DEBUG)
        log.setLevel(logging.DEBUG)

    client = make_client(p)
    repository = client.get_repository(p.repo_id)
    units = repository.search_content(type_id=p.content_type)

    if units:
        log.info("Found %s %s units: \n\t%s" % (
            len(units), p.content_type,
            "\n\t".join(str(unit) for unit in units)
        ))
    else:
        log.info("No %s units found." % p.content_type)

    return units


if __name__ == "__main__":
    main()
