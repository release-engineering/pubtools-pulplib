#!/usr/bin/env python
import os
import re
import logging
from argparse import ArgumentParser

from pubtools.pulplib import Client, Criteria, Matcher

log = logging.getLogger("set-maintenance")


def set_maintenance(client, regex):

    report = client.get_maintenance_report().result()

    crit = Criteria.with_field("relative_url", Matcher.regex(regex))
    # search repos by distributor's relative_url
    distributors = client.search_distributor(crit).result()

    repo_ids = [dist.repo_id for dist in distributors]
    report = report.add(repo_ids)
    # get the repo ids and feed to report

    tasks = client.set_maintenance(report).result()

    report = client.get_maintenance_report().result()
    log.info("maintenance mode set: %s", report.entries)

    report = report.remove(repo_ids)
    tasks = client.set_maintenance(report).result()

    report = client.get_maintenance_report().result()
    log.info("maintenance mode unset: %s", report.entries)


def make_client(args):
    auth = None

    if args.username:
        password = args.password
        if password is None:
            password = os.environ.get("PULP_PASSWORD")
        if not password:
            log.warning("No password provided for %s", args.username)
        auth = (args.username, args.password)

    return Client(args.url, auth=auth, verify=not args.insecure)


def main():
    log.setLevel(logging.INFO)
    logging.basicConfig(format="%(message)s", level=logging.INFO)

    parser = ArgumentParser(description="Set/unset maintenance mode of Pulp")
    parser.add_argument("--url", help="Pulp server URL")
    parser.add_argument("--username", help="Pulp username")
    parser.add_argument(
        "--password", help="Pulp password (or set PULP_PASSWORD in env)"
    )
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--insecure", default=False, action="store_true")
    parser.add_argument("--repo-url-regex", action="store")

    p = parser.parse_args()

    if not p.url:
        parser.error("--url is required")

    if not p.repo_url_regex:
        parser.error("--repo-url-regex is required")

    if p.debug:
        logging.getLogger("pubtools.pulplib").setLevel(logging.DEBUG)
        log.setLevel(logging.DEBUG)

    client = make_client(p)
    return set_maintenance(client, p.repo_url_regex)


if __name__ == "__main__":
    main()
